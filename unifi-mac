#!/usr/bin/python3

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/unifi/api.json'

#########################################################################
### Declarations ########################################################
#########################################################################

import json, optparse, unificontrol, ssl, sys

# trying to make errors as painless as possible, but that's not *that*
# painless
# sys.tracebacklimit = -1

description = 'block/unblock by mac address on a unifi network'
usage = '%prog --action ACTION MAC'

#########################################################################
### Subroutines #########################################################
#########################################################################

def parseConfig(file):
    try:
        config = json.load(open(file, 'r'))
    except IOError as e:
        print("file error:  %s" % e)
        sys.exit(2)
    except Exception as e:
        print("unknown error:  %s" % e)
        sys.exit(2)

    return config

def get_cert(config):
    if config['cert_valid']:
        cert=None
    else:
        try:
            cert = ssl.get_server_certificate((unifi_server, unifi_port))
        except Exception as e:
            raise Exception("could not get ssl cert: %s" % e)
            sys.exit(-1)

    return cert

def connect_unifi(config):
    cert = get_cert(config)
    try:
        client = unificontrol.UnifiClient(
            host=config['server'],
            username=config['user'],
            password=config['pass'],
            site=config['site'],
            cert=cert)
    except Exception as e:
        raise Exception("could not connect to unifi: %s" % e)
        sys.exit(-1)

    return client

#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p

    p = optparse.OptionParser(usage=usage, description=description)
    p.add_option('--debug', dest='debug', action='store_true', default=False)
    p.add_option('--config', dest='config', action='store',
        default=config_file)
    p.add_option('--action', dest='action', action='store', default='status',
        choices=['status', 'block', 'unblock'])

    global opt
    opt, args = p.parse_args()

    global config
    config = parseConfig(opt.config)
    client = connect_unifi(config)

    if len(args) != 1:
        p.print_help()
        sys.exit(-1)

    mac = args[0]

    if opt.action == 'status':
        try:
            results = client.list_clients(client_mac=mac)
        except unificontrol.UnifiTransportError as e:
            print('no matches' % e)
            sys.exit(-1)
        except Exception as e:
            print('unknown error: %s' % e)
            sys.exit(-1)

        # print(json.dumps(results, indent=4))
        ip = results[0]['ip']
        hostname = results[0]['hostname']
        mac = results[0]['mac']
        blocked = 'blocked' if results[0]['blocked'] else 'not blocked'
        print("%-15s   %-17s  %s (%s)" % (ip, mac, hostname, blocked))

    elif opt.action == 'block':

        try:
            client.block_client(mac)
            print("blocked client: %s" % mac)
        except Exception as e:
            raise Exception("tried to unblock %s and failed: %s" % (mac, e))

    elif opt.action == 'unblock':

        try:
            client.unblock_client(mac)
            print("unblocked client: %s" % mac)
        except Exception as e:
            raise Exception("tried to unblock %s and failed: %s" % (mac, e))

    else:
        print("unknown action: %s" % opt.action)
        sys.exit(-1)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

unifi-mac - block or unblock hosts by MAC address on a unifi network

=head1 SYNOPSIS

B<unifi-mac> --action block 12:34:56:78:90:ab

B<unifi-mac> --action unblock 12:34:56:78:90:ab

B<unifi-mac> 12:34:56:78:90:ab

=head1 USAGE

unifi-mac uses the Ubiquiti API to block, unblock, or check the block
status of a specific MAC address on a Ubiquiti network.

=head1 OPTIONS

=over 4

=item --action ACTION

Valid choices: I<block>, I<unblock>, or I<status> (default).

=item --config CONFIG_FILE

Where should we load our unifi login configuration?  Defaults to
F</etc/unifi/api.json>.

=item --help

Print some help documentation.

=item MAC

MAC address to scan.

=back

=item

=head1 AUTHOR

Tim Skirvin <tskirvin@killfile.org>

=head1 COPYRIGHT + LICENSE

MIT License; see attached LICENSE file

=cut

"""
